#include <QCoreApplication>
#include <node.h>
#include <iostream>
#include <stdlib.h>
#include <time.h>
#include <zipf.h>
#include <random.h>
#include <network.h>
#include <fstream>
#include <hoshenkopelman.h>
#include <qexponential.h>
#include <assembler.h>
#include <chrono>
#include <limits>


int main(int argc, char *argv[]){
    std::vector<unsigned long int> random_vector;
    unsigned long int N = std::numeric_limits<double>::max();
    int threads = 16;
    std::cout << "Number of nodes: " << N << std::endl;
    qExponential qe = qExponential(N, 1, 1.25);
    qe.SetMin(0);
    auto start = std::chrono::high_resolution_clock::now();
    random_vector = qe.random(10000000, threads);
    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
    std::cout << "Generate random vector with " << N << " elements: " << duration.count() << " microseconds" << std::endl;
//    start = std::chrono::high_resolution_clock::now();
//    Network net = Network(random_vector, threads);
//    stop = std::chrono::high_resolution_clock::now();
//    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
//    std::cout << "Create the network's nodes: " << duration.count() << " microseconds" << std::endl;
//    start = std::chrono::high_resolution_clock::now();
//    bool b = net.random_link_AA_algorithm();
//    while(!b){
//        random_vector = qe.random(N, threads);
//        net = Network(random_vector, threads);
//        b = net.random_link_AA_algorithm();
//    }
//    stop = std::chrono::high_resolution_clock::now();
//    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
//    std::cout << "Create the network's links randomly: " << duration.count() << " microseconds" << std::endl;
//    start = std::chrono::high_resolution_clock::now();
//    Assembler as = Assembler(net);
//    stop = std::chrono::high_resolution_clock::now();
//    duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);
//    std::cout << "Compute the link-by-link adding statistics: " << duration.count() << " microseconds" << std::endl;
    std::ofstream myfile;
    myfile.open ("/home/marcio/qExp15_1.txt");
    for (unsigned long int i = 0; i < random_vector.size(); i++)
        if(i < random_vector.size() - 1) myfile << random_vector[i] << ",";
        else {
            myfile << random_vector[i];
        }
    std::cout << "Randon Vector Saved \n";
    myfile.close();
}

